local twilio = require 'twilio'

local trigger = json.parse(request.form.body)

storage.debug = trigger.debug

-- If we are debugging use the test account
if storage.debug then
	storage.account_sid = 'DEBUG TWILIO ACCOUNT SID'
	storage.auth_token = 'DEBUG TWILIO AUTH TOKEN'
else
	storage.account_sid = 'TWILIO ACCOUNT SID'
	storage.auth_token = 'TWILIO AUTH TOKEN'
end

if storage.flame_failure == nil then
	storage.flame_failure = 0
end

if storage.system_failure == nil then
	storage.system_failure = 0
end

local FROM = 'From phone number'

local NOTIFY = {
	--[[
	List of numbers to call
	]]--
	--[[
	'+15551234567',
	'+15552345678',
	]]--
}

function idiv(a, b)
	local q = a / b
	return (q > 0) and math.floor(q) or math.ceil(q)
end

function elapsed_time(seconds)
	local minutes = idiv(seconds, 60)
	seconds = seconds % 60

	local hours = idiv(minutes, 60)
	minutes = minutes % 60

	return hours..'h'..minutes..'m'..seconds..'s'
end

local debug_message = ''

function dbg(msg)
	debug_message = debug_message .. msg .. '\n'
end

function call(msg)
	for n, number in ipairs(NOTIFY) do
		twilio.call(storage.account_sid, storage.auth_token, FROM, number, 'http://queenbee.webscript.io/twilio?msg='..msg)
		dbg('Call: ' .. number)
	end
end

function sms(msg)
	for n, number in ipairs(NOTIFY) do
		twilio.sms(storage.account_sid, storage.auth_token, FROM, number, msg)
		dbg('SMS: ' .. number)
	end
end

function flame_reset(msg)
	local flame_failure = tonumber(storage.flame_failure)
	if flame_failure > 0 then
		dbg('Reset flame failure')
		sms('The furnace flame is now OK! Elapsed time: '
			..elapsed_time(os.difftime(os.time(), flame_failure)))

		storage.flame_failure = 0
	end
end

function flame_failure(msg)
	if tonumber(storage.flame_failure) == 0 then
		dbg('Record flame failure')
		storage.flame_failure = os.time()
		call(msg)
	else
		dbg('Ignore flame failure')
	end
end

function system_live(msg)
	local system_failure = tonumber(storage.system_failure)
	if system_failure > 0 then
		dbg('Reset system failure')
		sms('The monitoring system is now OK! Elapsed time: '
			..elapsed_time(os.difftime(os.time(), system_failure)))
		storage.system_failure = 0
	end
end

function system_frozen(msg)
	if tonumber(storage.system_failure) == 0 then
		dbg('Record system failure')
		storage.system_failure = os.time()
		call(msg)
	else
		dbg('Ignore system failure')
	end
end

local switch = {
	['auto'] = flame_reset,
	['low'] = flame_failure,
	['high'] = flame_failure,
	['live'] = system_live,
	['frozen'] = system_frozen,
}

dbg('Before:')
dbg('Flame Failure: ' .. tonumber(storage.flame_failure))
dbg('System Failure: ' .. tonumber(storage.system_failure))

if switch[request.query.msg] then
	dbg('Calling: '..request.query.msg)
	switch[request.query.msg](request.query.msg)
else
	dbg('No message: ' .. request.query.msg)
end

dbg('After:')
dbg('Flame Failure: ' .. tonumber(storage.flame_failure))
dbg('System Failure: ' .. tonumber(storage.system_failure))

if storage.debug then
	return debug_message, {
		["Content-Type"]="text/plain",
		["Date"]=os.date("%a, %d %b %Y %H:%M:%S %Z")
	}
else
	return 200
end
